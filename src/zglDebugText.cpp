/*
 * Copyright (C) 2010 ZiiLABS Pte Ltd
 * All Rights Reserved.
 *
 * This software and its associated documentation may contain some
 * proprietary, confidential and trade secret information of
 * ZiiLABS Pte Ltd and except as provided by written agreement with
 * ZiiLABS Pte Ltd
 *
 * a)   no part may be disclosed, distributed, reproduced, transmitted,
 *      transcribed, stored in a retrieval system, adapted or translated
 *      in any form or by any means electronic, mechanical, magnetic,
 *      optical, chemical, manual or otherwise,
 *
 * and
 *
 * b)   the recipient is not entitled to discover through reverse
 *      engineering or reverse compiling or other such techniques or
 *      processes the trade secrets contained therein or in the
 *      documentation.
 */

#include <string.h>		//!< strlen()

#include "zglCore.h" //!< genTextures

#include "zglDebugText.h"

static const unsigned char g_font_data[64][8] =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	// ' '
	{ 0x18, 0x18, 0x18, 0x08, 0x08, 0x04, 0x0c, 0x00 },	// '!'
	{ 0x36, 0x24, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00 },	// '"'
	{ 0x24, 0x7e, 0x24, 0x22, 0x12, 0x3f, 0x12, 0x00 },	// '#'
	{ 0x14, 0x7e, 0x15, 0x3e, 0x54, 0x3f, 0x14, 0x00 },	// '$'
	{ 0x46, 0x29, 0x19, 0x3e, 0x4c, 0x4a, 0x31, 0x00 },	// '%'
	{ 0x0c, 0x12, 0x0c, 0x12, 0x21, 0x61, 0x1e, 0x00 },	// '&'
	{ 0x0c, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 },	// '''
	{ 0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00 },	// '('
	{ 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00 },	// ')'
	{ 0x08, 0x6b, 0x6b, 0x1c, 0x6b, 0x6b, 0x08, 0x00 },	// '*'
	{ 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00 },	// '+'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x10, 0x08 },	// ','
	{ 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00 },	// '-'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 },	// '.'
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },	// '/'
	{ 0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00 },	// '0'
	{ 0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00 },	// '1'
	{ 0x1c, 0x22, 0x22, 0x10, 0x08, 0x04, 0x3e, 0x00 },	// '2'
	{ 0x1c, 0x22, 0x22, 0x18, 0x22, 0x22, 0x1c, 0x00 },	// '3'
	{ 0x10, 0x18, 0x14, 0x14, 0x12, 0x3e, 0x10, 0x00 },	// '4'
	{ 0x3e, 0x02, 0x02, 0x1e, 0x20, 0x22, 0x1c, 0x00 },	// '5'
	{ 0x08, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00 },	// '6'
	{ 0x3e, 0x22, 0x22, 0x10, 0x08, 0x08, 0x08, 0x00 },	// '7'
	{ 0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00 },	// '8'
	{ 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x08, 0x00 },	// '9'
	{ 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00 },	// ':'
	{ 0x00, 0x18, 0x18, 0x00, 0x18, 0x10, 0x08, 0x00 },	// ';'
	{ 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00 },	// '<'
	{ 0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00 },	// '='
	{ 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00 },	// '>'
	{ 0x3e, 0x41, 0x41, 0x38, 0x08, 0x00, 0x08, 0x00 },	// '?'
	{ 0x1c, 0x22, 0x59, 0x65, 0x65, 0x2a, 0x1c, 0x00 },	// '@'
	{ 0x1c, 0x22, 0x41, 0x7f, 0x41, 0x41, 0x41, 0x00 },	// 'A'
	{ 0x3f, 0x41, 0x41, 0x3f, 0x41, 0x41, 0x3f, 0x00 },	// 'B'
	{ 0x3c, 0x42, 0x01, 0x01, 0x01, 0x42, 0x3c, 0x00 },	// 'C'
	{ 0x1f, 0x21, 0x41, 0x41, 0x41, 0x21, 0x1f, 0x00 },	// 'D'
	{ 0x3f, 0x01, 0x01, 0x1f, 0x01, 0x01, 0x3f, 0x00 },	// 'E'
	{ 0x7f, 0x01, 0x01, 0x1f, 0x01, 0x01, 0x01, 0x00 },	// 'F'
	{ 0x1c, 0x22, 0x41, 0x01, 0x71, 0x62, 0x5c, 0x00 },	// 'G'
	{ 0x41, 0x41, 0x41, 0x7f, 0x41, 0x41, 0x41, 0x00 },	// 'H'
	{ 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00 },	// 'I'
	{ 0x70, 0x20, 0x20, 0x21, 0x21, 0x12, 0x0c, 0x00 },	// 'J'
	{ 0x41, 0x31, 0x0d, 0x03, 0x05, 0x19, 0x61, 0x00 },	// 'K'
	{ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f, 0x00 },	// 'L'
	{ 0x41, 0x63, 0x55, 0x49, 0x41, 0x41, 0x41, 0x00 },	// 'M'
	{ 0x41, 0x43, 0x45, 0x49, 0x51, 0x61, 0x41, 0x00 },	// 'N'
	{ 0x1c, 0x22, 0x41, 0x41, 0x41, 0x22, 0x1c, 0x00 },	// 'O'
	{ 0x3f, 0x41, 0x41, 0x41, 0x3f, 0x01, 0x01, 0x00 },	// 'P'
	{ 0x1c, 0x22, 0x41, 0x49, 0x51, 0x22, 0x5c, 0x00 },	// 'Q'
	{ 0x3f, 0x41, 0x41, 0x3f, 0x11, 0x21, 0x41, 0x00 },	// 'R'
	{ 0x3e, 0x41, 0x01, 0x3e, 0x40, 0x41, 0x3e, 0x00 },	// 'S'
	{ 0x7f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },	// 'T'
	{ 0x41, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1c, 0x00 },	// 'U'
	{ 0x41, 0x41, 0x41, 0x22, 0x22, 0x14, 0x08, 0x00 },	// 'V'
	{ 0x41, 0x41, 0x41, 0x2a, 0x2a, 0x14, 0x14, 0x00 },	// 'W'
	{ 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41, 0x00 },	// 'X'
	{ 0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00 },	// 'Y'
	{ 0x7f, 0x20, 0x10, 0x08, 0x04, 0x02, 0x7f, 0x00 },	// 'Z'
	{ 0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c, 0x00 },	// '['
	{ 0x22, 0x14, 0x7f, 0x08, 0x7f, 0x08, 0x08, 0x00 },	// '\'
	{ 0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x00 },	// ']'
	{ 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00 },	// '^'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00 },	// '_'
};

zglDebugText::zglDebugText()
{
	m_text_length = 0;
	m_used_length = 0;
}

zglDebugText::~zglDebugText()
{
}

void zglDebugText::init()
{
	unsigned char buffer[64 * 64];
	unsigned char bits;
	unsigned int texID;

	int i, j;

	for (i = 0; i < 64; i++)
	{
		for (j = 0; j < 64; j++)
		{
			bits = g_font_data[((i >> 3) << 3) + (j >> 3)][i & 0x07];
			buffer[(i << 6) + j] = ((bits >> (j & 0x07)) & 1) * 0xff;
		}
	}

	texID = zglCore::genTexture(64, 64, PIXEL_A8, (const char*) buffer);

	m_font.setDimension(64, 64);
	m_font.setTexID(texID);
}

void zglDebugText::print(int x, int y, const char * text)
{
	int length = strlen(text);

	if (m_used_length + length > m_debug_text_max)
	{
		length = m_debug_text_max - m_used_length;
	}

	int i;
	int mx = x - length * 4;
	int my = y + 8;
	char c;
	for (i = 0; i < length; i++)
	{
		c = text[i];

		if (c >= 0x80)
		{
			c = '?';
		}
		if (c >= 0x60)
		{
			c -= 0x20;
		}
		c -= 0x20;

		float u = (c % 8) / 8.0f;
		float v = (c / 8) / 8.0f;
		float s = 1.0f / 8.0f;

		int j = ((i + m_used_length) << 2);

		m_text_vertex[j].setPos(mx, my, 0.0f);
		m_text_vertex[j].setUV(u, v);
		m_text_vertex[j + 1].setPos(mx, my - 8, 0.0f);
		m_text_vertex[j + 1].setUV(u, v + s);
		m_text_vertex[j + 2].setPos(mx + 8, my, 0.0f);
		m_text_vertex[j + 2].setUV(u + s, v);
		m_text_vertex[j + 3].setPos(mx + 8, my - 8, 0.0f);
		m_text_vertex[j + 3].setUV(u + s, v + s);

		m_text[i + m_used_length].init(DRAW_TRI_STRIP, &m_text_vertex[j], 4,
				&m_font);
		//m_text[i].setTexture(&m_font);
		m_text[i + m_used_length].setBlendType(BLEND_HALF);
		m_text[i + m_used_length].setVisible(true);

		mx += 8;
	}

	m_used_length += length;

	for (i = m_used_length; i < m_debug_text_max; i++)
	{
		m_text[i].setVisible(false);
	}
}

void zglDebugText::clear()
{
	m_text_length = 0;
	m_used_length = 0;

	for (int i = 0; i < m_debug_text_max; i++)
	{
		//Drop from the node list.
		m_text[i].setVisible(false);
	}
}
