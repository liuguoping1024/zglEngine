/*
 * Copyright (C) 2010 ZiiLABS Pte Ltd
 * All Rights Reserved.
 *
 * This software and its associated documentation may contain some
 * proprietary, confidential and trade secret information of
 * ZiiLABS Pte Ltd and except as provided by written agreement with
 * ZiiLABS Pte Ltd
 *
 * a)   no part may be disclosed, distributed, reproduced, transmitted,
 *      transcribed, stored in a retrieval system, adapted or translated
 *      in any form or by any means electronic, mechanical, magnetic,
 *      optical, chemical, manual or otherwise,
 *
 * and
 *
 * b)   the recipient is not entitled to discover through reverse
 *      engineering or reverse compiling or other such techniques or
 *      processes the trade secrets contained therein or in the
 *      documentation.
 */

#ifndef __zgl_quad_mesh__
#define __zgl_quad_mesh__

#include "zglMesh.h"

/**
 * @brief A simple quadrangle mesh formed by two or four vertex on the corner
 * of the mesh.
 *
 * If the vertex of the left-top, right-bottom is appointed, or the left-top,
 * left-bottom, right-top, right-bottom is given, the linear output will be
 * generated by the interface #updateMesh().
 *
 * As to the vertex of the mesh, if the offset of the mesh is based on the output
 * of #updateMesh(), an extra buffer is suggested to be used by the user to store
 * the related vertex information.
 */
class zglQuadMesh: public zglMesh
{
public:
	zglQuadMesh();

	/**
	 * @brief initial the primitive.
	 *
	 * The QuadMesh will be defined by rows and columns. For example,
	 * if rows = 3, and cols = 3, then the plane will be divide into 4 parts.
	 *
	 * @param rows the row of the mesh(行).
	 * @param cols the columns of the mesn(栏).
	 * @param texture texture of the primitive.
	 */
	void init(int rows, int cols, zglTexture * texture);

	/**
	 * @brief Update the vertex of the mesh, including the coordinate and
	 * the UV value.
	 *
	 * The z-coordinate is skipped in current value. The output z-coordinate
	 * is the same to the value of the vertex vlt.
	 *
	 * @param vlt the vertex at the left-top corner of the mesh.
	 * @param vrb the vertex at the right-bottom corner of the mesh.
	 */
	void updateMesh(zglVertexEx * vlt, zglVertexEx * vrb);

	/**
	 * @brief Update the vertex of the mesh, including the coordinate and
	 * the UV value
	 *
	 * @param vlt the vertex at the left-top corner of the mesh.
	 * @param vlb the vertex at the left-bottom corner of the mesh.
	 * @param vrt the vertex at the right-top corner of the mesh.
	 * @param vrb the vertex at the right-bottom corner of the mesh.
	 */
	void updateMesh(zglVertexEx * vlt, zglVertexEx * vlb, zglVertexEx * vrt,
			zglVertexEx * vrb);

	/**
	 * Set the mesh type.
	 */
	virtual void setMeshType(unsigned char type);

	/**
	 * @brief get the rows of the primitive.
	 */
	inline unsigned char getRows() const
	{
		return m_rows;
	}

	/**
	 * @brief get the columns of the primitive.
	 */
	inline unsigned char getCols() const
	{
		return m_cols;
	}

protected:
	/**
	 * @brief render handler of the widget.
	 */
	virtual void render();

	/**
	 * @brief  Update the the index array when mesh type changed.
	 */
	void updateMeshType();

private:
	/**
	 * Render the mesh of No VBO(hardware buffer)
	 */
	void renderNoVBO();

	/**
	 * Render the mesh of VBO(hardware buffer)
	 */
	void renderVBO();

protected:
	unsigned char m_rows; //!< The rows of the primitive.
	unsigned char m_cols; //!< The columns of the primitive.
};


#endif
